
duser@HOME-PC MINGW64 ~
$ python --version
Python 3.7.0

duser@HOME-PC MINGW64 ~
$ cd D:/PycharmProjects/p_tr

duser@HOME-PC MINGW64 /d/PycharmProjects/p_tr (main)
$ source D:/PycharmProjects/p_tr/env/Scripts/activate
(env)
duser@HOME-PC MINGW64 /d/PycharmProjects/p_tr (main)
$ py.test test_add_group.py
============================= test session starts =============================
platform win32 -- Python 3.8.0, pytest-7.2.1, pluggy-1.0.0
rootdir: D:\PycharmProjects\p_tr
collected 1 item

test_add_group.py F                                                      [100%]

================================== FAILURES ===================================
_________________________ TestAddGroup.test_add_group _________________________

self = <test_add_group.TestAddGroup testMethod=test_add_group>

    def setUp(self):
>       self.wd = webdriver.Firefox()

test_add_group.py:12:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
env\lib\site-packages\selenium\webdriver\firefox\webdriver.py:191: in __init__
    self.service.start()
env\lib\site-packages\selenium\webdriver\common\service.py:88: in start
    self._start_process(self.path)
env\lib\site-packages\selenium\webdriver\common\service.py:195: in _start_process
    self.process = subprocess.Popen(
C:\Python38\lib\subprocess.py:854: in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <subprocess.Popen object at 0x000001BA8A84D460>
args = 'geckodriver --port 54881 --websocket-port 54882', executable = None
preexec_fn = None, close_fds = False, pass_fds = (), cwd = None
env = environ({'ACLOCAL_PATH': 'C:\\Program Files\\Git\\mingw64\\share\\aclocal;C:\\Program Files\\Git\\usr\\share\\aclocal'...\openjdk-17_windows-x64_bin\\jdk-17', 'PYTEST_CURRENT_TEST': 'test_add_group.py::TestAddGroup::test_add_group (call)'})
startupinfo = <subprocess.STARTUPINFO object at 0x000001BA8A84D4F0>
creationflags = 0, shell = False, p2cread = Handle(748), p2cwrite = 12
c2pread = -1, c2pwrite = Handle(636), errread = -1, errwrite = Handle(740)
unused_restore_signals = True, unused_start_new_session = False

    def _execute_child(self, args, executable, preexec_fn, close_fds,
                       pass_fds, cwd, env,
                       startupinfo, creationflags, shell,
                       p2cread, p2cwrite,
                       c2pread, c2pwrite,
                       errread, errwrite,
                       unused_restore_signals, unused_start_new_session):
        """Execute program (MS Windows version)"""

        assert not pass_fds, "pass_fds not supported on Windows."

        if isinstance(args, str):
            pass
        elif isinstance(args, bytes):
            if shell:
                raise TypeError('bytes args is not allowed on Windows')
            args = list2cmdline([args])
        elif isinstance(args, os.PathLike):
            if shell:
                raise TypeError('path-like args is not allowed when '
                                'shell is true')
            args = list2cmdline([args])
        else:
            args = list2cmdline(args)

        if executable is not None:
            executable = os.fsdecode(executable)

        # Process startup details
        if startupinfo is None:
            startupinfo = STARTUPINFO()
        else:
            # bpo-34044: Copy STARTUPINFO since it is modified above,
            # so the caller can reuse it multiple times.
            startupinfo = startupinfo.copy()

        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)
        if use_std_handles:
            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES
            startupinfo.hStdInput = p2cread
            startupinfo.hStdOutput = c2pwrite
            startupinfo.hStdError = errwrite

        attribute_list = startupinfo.lpAttributeList
        have_handle_list = bool(attribute_list and
                                "handle_list" in attribute_list and
                                attribute_list["handle_list"])

        # If we were given an handle_list or need to create one
        if have_handle_list or (use_std_handles and close_fds):
            if attribute_list is None:
                attribute_list = startupinfo.lpAttributeList = {}
            handle_list = attribute_list["handle_list"] = \
                list(attribute_list.get("handle_list", []))

            if use_std_handles:
                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]

            handle_list[:] = self._filter_handle_list(handle_list)

            if handle_list:
                if not close_fds:
                    warnings.warn("startupinfo.lpAttributeList['handle_list'] "
                                  "overriding close_fds", RuntimeWarning)

                # When using the handle_list we always request to inherit
                # handles but the only handles that will be inherited are
                # the ones in the handle_list
                close_fds = False

        if shell:
            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW
            startupinfo.wShowWindow = _winapi.SW_HIDE
            comspec = os.environ.get("COMSPEC", "cmd.exe")
            args = '{} /c "{}"'.format (comspec, args)

        if cwd is not None:
            cwd = os.fsdecode(cwd)

        sys.audit("subprocess.Popen", executable, args, cwd, env)

        # Start the process
        try:
>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                                     # no special security
                                     None, None,
                                     int(not close_fds),
                                     creationflags,
                                     env,
                                     cwd,
                                     startupinfo)
E                                    OSError: [WinError 216] ▒▒▒ ▒▒▒▒▒▒ "%1" ▒▒ ▒▒▒▒▒▒▒▒▒▒ ▒ ▒▒▒▒▒▒▒ Windows, ▒▒▒▒▒▒▒▒▒▒ ▒▒ ▒▒▒▒ ▒▒▒▒▒▒▒▒▒▒. ▒▒▒▒▒▒▒▒▒ ▒▒▒▒▒▒▒▒ ▒ ▒▒▒▒▒▒▒, ▒ ▒▒▒▒▒ ▒▒▒▒▒▒▒▒▒▒ ▒ ▒▒▒▒▒▒▒▒ ▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒▒▒▒▒▒▒▒▒▒

C:\Python38\lib\subprocess.py:1307: OSError
=========================== short test summary info ===========================
FAILED test_add_group.py::TestAddGroup::test_add_group - OSError: [WinError 2...
============================== 1 failed in 0.29s ==============================
